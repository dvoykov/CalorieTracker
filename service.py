from search import IngredientNutritionSearch
from fastapi import FastAPI, HTTPException, Request
import base64
from typing import Any

from assistant import LLMAssistant

# Initialize FastAPI app
app = FastAPI()

engine = IngredientNutritionSearch("nutrition.csv")

model_id = "80537f9eead1a5bfa72d5ac6ea6414379be41d4d4f6679fd776e9535d1eb58bb"

system_prompt = "\n".join(
    [
        "Identify the food shown in the photo and write the list of ingredients and their exact weight in grams.",
        "The sum of the grams of the ingredients should correspond to the total weight of the food.",
        'Example of expected response for image with food: {"cheese": 30, "mushrooms": 40, "olives": 50}',
        "If there is no food in the image, return an empty JSON object.",
        "Example of expected response for image without food: {}"
        "Just return the JSON object, don't write anything else.",
    ]
)

assistant = LLMAssistant(system_prompt, model_id, temperature=0.01)


@app.post("/generate_response")
async def generate_response(request: Request) -> Any:
    """
    Generates a response based on the Base64-encoded image string provided in the request.

    Args:
        The request should contain a JSON body with a 'image_base64' field that contains
        the Base64 encoded image data.

    Returns:
        Any: The response generated by the assistant.

    Raises:
        HTTPException:
            - 400: If the Base64 decoding fails.
            - 504: If a TimeoutError occurs.
            - 500: If an unexpected error occurs.
    """
    try:
        # Parse the JSON body and extract the Base64 string
        data = await request.json()
        image_base64 = data.get("image_base64")

        if not image_base64:
            raise HTTPException(
                status_code=400, detail="Base64 image data is required."
            )

        # Decode the base64 string to ensure it's valid
        try:
            base64.b64decode(image_base64)
        except Exception as e:
            raise HTTPException(
                status_code=400, detail=f"Invalid Base64 string: {str(e)}"
            )

        # Pass the Base64 data to the assistant
        llm_response = assistant.generate_response(image_base64)

        if llm_response["result"]:
            search_results = engine.search(
                llm_response["result"], search_type="semantic"
            )

            llm_response["result"] = search_results

        return llm_response

    except TimeoutError as te:
        raise HTTPException(
            status_code=504, detail="Request timed out: " + str(te)
        ) from te

    except HTTPException as he:
        raise HTTPException(status_code=he.status_code, detail=he.detail) from he

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"An unexpected error occurred: {str(e)}"
        ) from e
